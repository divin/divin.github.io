I"·Y<h1 id="introduction">Introduction</h1>

<p>In this tutorial I‚Äôll show you how to make a drawable and draggable paper in Godot. The result will look like this:</p>

<p><img src="/assets/images/posts/tutorial_1/result.gif" alt="Result" title="Result" /></p>

<p>This tutorial is more aimed for people with a bit of knowledge in Godot and GDScript.
I like to use a bit more Object Oriented Programming (OOP) style and usually try to define the variables and methods correctly by limiting
the data type (for example <code class="language-plaintext highlighter-rouge">var foo : String = "bar"</code>). This is helpful to prevent misuse of variables/methods and make bug fixing a bit easier in my opinion.</p>

<p>Download links for the source code are on my GitHub (or scroll <a href="#Download">down</a>) :)</p>

<h1 id="project-settings">Project settings</h1>

<p>The only changes I did to the project settings were made under <code class="language-plaintext highlighter-rouge">Display/Window</code>:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Width = 320
Height = 180
...
Test Width = 1280
Test Height = 720
...
Mode = 2d
Aspect = expand
</code></pre></div></div>

<h1 id="creating-the-paper-scene">Creating the paper scene</h1>

<p>We will start with the interesting part, the paper itself. We make a new scene, use a <code class="language-plaintext highlighter-rouge">TextureRect</code> as our root node and name it ‚ÄúPaper‚Äù. I didn‚Äôt changed any settings in the inspector.
Depending on your aim you want to add now a texture to the <code class="language-plaintext highlighter-rouge">TextureRect</code> or later in the <code class="language-plaintext highlighter-rouge">Main</code> scene.</p>

<h2 id="set-variables">Set variables</h2>

<p>Next, we attach a script to it. I usually like to give the script a <code class="language-plaintext highlighter-rouge">class_name</code>, the name of the script itself (in our case <code class="language-plaintext highlighter-rouge">Paper</code>). Let‚Äôs define some variables:</p>

<div class="language-gdscript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class_name</span> <span class="n">Paper</span>
<span class="k">extends</span> <span class="n">TextureRect</span>

<span class="c1"># Bool to check if pen is selected</span>
<span class="k">var</span> <span class="n">pen_selected</span> <span class="p">:</span> <span class="kt">bool</span>

<span class="c1"># Drawing color of the pen</span>
<span class="k">const</span> <span class="n">color</span> <span class="p">:</span> <span class="kt">Color</span> <span class="o">=</span> <span class="kt">Color</span><span class="p">(</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span> <span class="p">)</span> <span class="c1"># Black</span>

<span class="c1"># Saves the Position if the Paper is being dragged</span>
<span class="k">var</span> <span class="n">drag_position</span> <span class="p">:</span> <span class="kt">Vector2</span> <span class="o">=</span> <span class="kt">Vector2</span><span class="o">.</span><span class="n">ZERO</span>

<span class="c1"># Save the previouse Mouse position</span>
<span class="k">var</span> <span class="n">previous_mouse_position</span> <span class="p">:</span> <span class="kt">Vector2</span> <span class="o">=</span> <span class="kt">Vector2</span><span class="o">.</span><span class="n">ZERO</span>

<span class="c1"># Create an Node2D for the pen when ready</span>
<span class="k">onready</span> <span class="k">var</span> <span class="n">pen</span> <span class="p">:</span> <span class="n">Node2D</span> <span class="o">=</span> <span class="n">Node2D</span><span class="o">.</span><span class="n">new</span><span class="p">()</span>
</code></pre></div></div>

<p>Most of them are self-explanatory (or explained by the comments), the <code class="language-plaintext highlighter-rouge">pen</code> variable, which is an <code class="language-plaintext highlighter-rouge">Node2D</code>, is used to create our ‚Äúpen‚Äù. We will call the <code class="language-plaintext highlighter-rouge">draw</code> method from this Node to do the drawing.</p>

<h2 id="setter-function">Setter function</h2>

<p>We also need a function to set our variable <code class="language-plaintext highlighter-rouge">pen_selected</code> from outside the script:</p>

<div class="language-gdscript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Setter function for pen_selected</span>
<span class="k">func</span> <span class="nf">set_pen_selected</span><span class="p">(</span><span class="n">is_selected</span> <span class="p">:</span> <span class="kt">bool</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">void</span><span class="p">:</span>
  <span class="bp">self</span><span class="o">.</span><span class="n">pen_selected</span> <span class="o">=</span> <span class="n">is_selected</span>
</code></pre></div></div>

<h2 id="make-drawing-possible">Make drawing possible</h2>

<p>Now is time to make the drawing possible</p>

<div class="language-gdscript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="nf">make_drawing_possible</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">void</span><span class="p">:</span>

  <span class="c1"># Create Viewport to render the drawing</span>
  <span class="k">var</span> <span class="n">viewport</span> <span class="o">=</span> <span class="n">Viewport</span><span class="o">.</span><span class="n">new</span><span class="p">()</span>
  <span class="k">var</span> <span class="n">rect</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">get_rect</span><span class="p">()</span> <span class="c1"># Get the size of the TextureRect</span>
  <span class="n">viewport</span><span class="o">.</span><span class="n">size</span> <span class="o">=</span> <span class="n">rect</span><span class="o">.</span><span class="n">size</span> <span class="c1"># Set size of viewport to the size of TextureRect</span>
  <span class="n">viewport</span><span class="o">.</span><span class="n">usage</span> <span class="o">=</span> <span class="n">Viewport</span><span class="o">.</span><span class="n">USAGE_2D</span> <span class="c1"># Render Mode</span>
  <span class="n">viewport</span><span class="o">.</span><span class="n">render_target_clear_mode</span> <span class="o">=</span> <span class="n">Viewport</span><span class="o">.</span><span class="n">CLEAR_MODE_ONLY_NEXT_FRAME</span> <span class="c1"># Works better than CLEAR_MODE_NEVER</span>
  <span class="n">viewport</span><span class="o">.</span><span class="n">render_target_v_flip</span> <span class="o">=</span> <span class="bp">true</span> <span class="c1"># OpenGL flips render target so we have to flip it again</span>
  <span class="n">viewport</span><span class="o">.</span><span class="n">transparent_bg</span> <span class="o">=</span> <span class="bp">true</span> <span class="c1"># Set Background transparent so we see the drawing</span>
  <span class="n">viewport</span><span class="o">.</span><span class="n">add_child</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">pen</span><span class="p">)</span> <span class="c1"># Add the pen as child to the Viewport</span>

  <span class="bp">self</span><span class="o">.</span><span class="n">pen</span><span class="o">.</span><span class="n">connect</span><span class="p">(</span><span class="s2">"draw"</span><span class="p">,</span> <span class="bp">self</span><span class="p">,</span> <span class="s2">"_on_draw"</span><span class="p">)</span> <span class="c1"># Connect _on_draw with the draw method from pen</span>
  <span class="bp">self</span><span class="o">.</span><span class="n">add_child</span><span class="p">(</span><span class="n">viewport</span><span class="p">)</span> <span class="c1"># Add viewport as child</span>
  
  <span class="c1"># Use a sprite to display the result texture</span>
  <span class="k">var</span> <span class="n">rt</span> <span class="o">=</span> <span class="n">viewport</span><span class="o">.</span><span class="n">get_texture</span><span class="p">()</span> <span class="c1"># Which is transparent</span>
  <span class="k">var</span> <span class="n">board</span> <span class="o">=</span> <span class="n">TextureRect</span><span class="o">.</span><span class="n">new</span><span class="p">()</span> <span class="c1"># Make a canvas (also TextureRect)</span>
  <span class="n">board</span><span class="o">.</span><span class="n">set_texture</span><span class="p">(</span><span class="n">rt</span><span class="p">)</span> <span class="c1"># Set texture</span>
  <span class="bp">self</span><span class="o">.</span><span class="n">add_child</span><span class="p">(</span><span class="n">board</span><span class="p">)</span> <span class="c1"># Add canvas</span>
</code></pre></div></div>

<p>I‚Äôve commented the code as good as possible to get an understanding what is happening. Credit goes to a user called ‚ÄúZylann‚Äù from this <a href="https://godotengine.org/qa/24621/painting-game-persist-drawing">post</a>. I had to change some bits to suit my needs.</p>

<p>Basically we create an new <code class="language-plaintext highlighter-rouge">Viewport</code> to render the drawing (with the same size as our <code class="language-plaintext highlighter-rouge">Paper</code>) and add our <code class="language-plaintext highlighter-rouge">pen</code> as child. We connect the <code class="language-plaintext highlighter-rouge">_on_draw</code> method (which we will define in a bit) to the <code class="language-plaintext highlighter-rouge">draw</code> method of the <code class="language-plaintext highlighter-rouge">pen</code>. After that we add the <code class="language-plaintext highlighter-rouge">Viewport</code> as child to the <code class="language-plaintext highlighter-rouge">Paper</code>, create another <code class="language-plaintext highlighter-rouge">TextureRect</code> which suits us as canvas.</p>

<h2 id="get-ready-and-process">Get ready and process</h2>

<p>The next step is simple, we call our monstrosity of function <code class="language-plaintext highlighter-rouge">make_drawing_possible</code> in <code class="language-plaintext highlighter-rouge">_ready</code> and update the <code class="language-plaintext highlighter-rouge">pen</code> in <code class="language-plaintext highlighter-rouge">_process</code>.</p>

<div class="language-gdscript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="nf">_ready</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">void</span><span class="p">:</span>
  <span class="bp">self</span><span class="o">.</span><span class="n">make_signature_possible</span><span class="p">()</span>

<span class="k">func</span> <span class="nf">_process</span><span class="p">(</span><span class="n">_delta</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">void</span><span class="p">:</span>
  <span class="bp">self</span><span class="o">.</span><span class="n">pen</span><span class="o">.</span><span class="n">update</span><span class="p">()</span>
</code></pre></div></div>

<h2 id="draw">Draw</h2>

<p>Now it‚Äôs time to define <code class="language-plaintext highlighter-rouge">_on_draw</code>:</p>

<div class="language-gdscript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="nf">_on_draw</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">void</span><span class="p">:</span>
  <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">pen_selected</span><span class="p">:</span>
    <span class="k">var</span> <span class="n">mouse_pos</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">get_local_mouse_position</span><span class="p">()</span> <span class="c1"># Get local mouse position</span>

    <span class="k">if</span> <span class="n">Input</span><span class="o">.</span><span class="n">is_mouse_button_pressed</span><span class="p">(</span><span class="n">BUTTON_LEFT</span><span class="p">):</span>
      <span class="bp">self</span><span class="o">.</span><span class="n">pen</span><span class="o">.</span><span class="n">draw_line</span><span class="p">(</span><span class="n">mouse_pos</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">previous_mouse_position</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">color</span><span class="p">)</span> <span class="c1"># Finally draw something</span>
    <span class="bp">self</span><span class="o">.</span><span class="n">previous_mouse_position</span> <span class="o">=</span> <span class="n">mouse_pos</span> <span class="c1"># Update previous mouse position</span>
</code></pre></div></div>

<p>If <code class="language-plaintext highlighter-rouge">pen_selected == true</code> we get the mouse position and if we also press the left mouse button we start drawing. Before we return we update the <code class="language-plaintext highlighter-rouge">previous_mouse_position</code>.</p>

<h2 id="dragging">Dragging</h2>

<p>Now to make the paper also draggable we select <code class="language-plaintext highlighter-rouge">Paper</code> (the <code class="language-plaintext highlighter-rouge">TextureRect</code>) in the scene view and click at the <code class="language-plaintext highlighter-rouge">Node</code> tab (usually next to the <code class="language-plaintext highlighter-rouge">Inspector</code> tab). Here we want to connect the <code class="language-plaintext highlighter-rouge">gui_input(event : InputEvent)</code> with our script. A function should be automatically generated in the <code class="language-plaintext highlighter-rouge">Paper.gd</code> once connected. The name will be differ depending how you named the <code class="language-plaintext highlighter-rouge">TextureRect</code>.</p>

<div class="language-gdscript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="nf">_on_Paper_gui_input</span><span class="p">(</span><span class="n">event</span> <span class="p">:</span> <span class="n">InputEvent</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">void</span><span class="p">:</span>

  <span class="k">if</span> <span class="ow">not</span> <span class="bp">self</span><span class="o">.</span><span class="n">pen_selected</span><span class="p">:</span>
    <span class="k">if</span> <span class="n">event</span> <span class="k">is</span> <span class="n">InputEventMouseButton</span><span class="p">:</span>
      <span class="k">if</span> <span class="n">event</span><span class="o">.</span><span class="n">pressed</span><span class="p">:</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">drag_position</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">get_global_mouse_position</span><span class="p">()</span> <span class="o">-</span> <span class="bp">self</span><span class="o">.</span><span class="n">rect_global_position</span>
      <span class="k">else</span><span class="p">:</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">drag_position</span> <span class="o">=</span> <span class="kt">Vector2</span><span class="o">.</span><span class="n">ZERO</span>
    <span class="k">if</span> <span class="n">event</span> <span class="k">is</span> <span class="n">InputEventMouseMotion</span> <span class="ow">and</span> <span class="n">drag_position</span> <span class="o">!=</span> <span class="kt">Vector2</span><span class="o">.</span><span class="n">ZERO</span><span class="p">:</span>
      <span class="bp">self</span><span class="o">.</span><span class="n">rect_global_position</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">get_global_mouse_position</span><span class="p">()</span> <span class="o">-</span> <span class="bp">self</span><span class="o">.</span><span class="n">drag_position</span>
</code></pre></div></div>

<p>If we didn‚Äôt select the pen and the <code class="language-plaintext highlighter-rouge">InputEvent</code> recognized an <code class="language-plaintext highlighter-rouge">event</code> of type <code class="language-plaintext highlighter-rouge">InputEventMouseButton</code> (we clicked a mouse button) and is <code class="language-plaintext highlighter-rouge">pressed</code> we want to update the <code class="language-plaintext highlighter-rouge">drag_position</code>. Otherwise we want to set the <code class="language-plaintext highlighter-rouge">drag_position</code> to a zero vector. If there is an <code class="language-plaintext highlighter-rouge">event</code> type <code class="language-plaintext highlighter-rouge">InputEventMouseMotion</code> (we moved the mouse) and the <code class="language-plaintext highlighter-rouge">drag_position</code> is not a zero vector we want to update the position of the <code class="language-plaintext highlighter-rouge">TextureRect</code>.</p>

<h1 id="creating-the-main-scene">Creating the main scene</h1>

<p>Now we getting closer to the finish. We make now our <code class="language-plaintext highlighter-rouge">Main</code> scene. Simply by creating an new scene, choose a basic <code class="language-plaintext highlighter-rouge">Node2D</code> as root node and name it ‚ÄúMain‚Äù. Before we start programming we drag and drop the <code class="language-plaintext highlighter-rouge">Paper</code> scene inside our <code class="language-plaintext highlighter-rouge">Main</code> scene.</p>

<h2 id="set-variables-1">Set variables</h2>

<p>Similar to <code class="language-plaintext highlighter-rouge">Paper</code> scene we create some variables. A variable <code class="language-plaintext highlighter-rouge">paper</code> which refers to the just added <code class="language-plaintext highlighter-rouge">Paper</code> scene and <code class="language-plaintext highlighter-rouge">pen_selected</code> which is the same as we used in <code class="language-plaintext highlighter-rouge">Paper.gd</code>.</p>

<div class="language-gdscript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class_name</span> <span class="n">Main</span>
<span class="k">extends</span> <span class="n">Node2D</span>

<span class="c1"># Grab the Paper when ready</span>
<span class="k">onready</span> <span class="k">var</span> <span class="n">paper</span> <span class="p">:</span> <span class="n">Paper</span> <span class="o">=</span> <span class="o">$</span><span class="n">Paper</span>

<span class="c1"># Bool to store if pen is selected</span>
<span class="k">var</span> <span class="n">pen_selected</span> <span class="p">:</span> <span class="kt">bool</span> <span class="o">=</span> <span class="bp">false</span>
</code></pre></div></div>

<h2 id="get-input">Get input</h2>

<p>We now want to be able to switch between dragging and drawing. This is done by a simple key press (in this case ‚ÄúA‚Äù).</p>

<div class="language-gdscript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="nf">_input</span><span class="p">(</span><span class="n">event</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">void</span><span class="p">:</span>

  <span class="c1"># Bool to check if the button is just pressed (not needed if you assigned a action key)</span>
  <span class="k">var</span> <span class="n">just_pressed</span> <span class="p">:</span> <span class="kt">bool</span> <span class="o">=</span> <span class="n">event</span><span class="o">.</span><span class="n">is_pressed</span><span class="p">()</span> <span class="ow">and</span> <span class="ow">not</span> <span class="n">event</span><span class="o">.</span><span class="n">is_echo</span><span class="p">()</span>

  <span class="c1"># Check if the "A" button was just pressed</span>
  <span class="k">if</span> <span class="n">Input</span><span class="o">.</span><span class="n">is_key_pressed</span><span class="p">(</span><span class="n">KEY_A</span><span class="p">)</span> <span class="ow">and</span> <span class="n">just_pressed</span><span class="p">:</span>
    <span class="bp">self</span><span class="o">.</span><span class="n">select_pen</span><span class="p">()</span>
</code></pre></div></div>

<p>If the ‚ÄúA‚Äù key is just pressed, we want to call a method <code class="language-plaintext highlighter-rouge">select_pen</code> which communicates between the <code class="language-plaintext highlighter-rouge">Main.gd</code> and <code class="language-plaintext highlighter-rouge">Paper.gd</code>.</p>

<h2 id="select-the-pen">Select the pen</h2>

<p>The last step is to set <code class="language-plaintext highlighter-rouge">pen_selected</code> in <code class="language-plaintext highlighter-rouge">Paper.gd</code>:</p>

<div class="language-gdscript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="nf">select_pen</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">void</span><span class="p">:</span>
  <span class="c1"># Function which selectes the pen</span>

  <span class="c1"># Negate pen_selected</span>
  <span class="bp">self</span><span class="o">.</span><span class="n">pen_selected</span> <span class="o">=</span> <span class="ow">not</span> <span class="bp">self</span><span class="o">.</span><span class="n">pen_selected</span>

  <span class="c1"># Set pen_selected from the paper</span>
  <span class="n">paper</span><span class="o">.</span><span class="n">set_pen_selected</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">pen_selected</span><span class="p">)</span>
</code></pre></div></div>

<p>Now you should be able to draw on the paper :)</p>

<h1 id="conclusion">Conclusion</h1>

<p>If you followed this tutorial correctly, you should be able to drag a paper and also draw on it. Based on this you can expand this mechanic for all kinds of application. I hope you enjoyed it!</p>

<p>I‚Äôm making a little game based on this mechanic, I‚Äôll post other tutorials where we expand this idea a bit further. So stay tuned! :)</p>

<h1 id="download-">Download <a name="download"></a></h1>

<p>You can find the the source code for this tutorial and all upcoming tutorials <a href="https://github.com/divin/Godot-Tutorials">here</a></p>
:ET