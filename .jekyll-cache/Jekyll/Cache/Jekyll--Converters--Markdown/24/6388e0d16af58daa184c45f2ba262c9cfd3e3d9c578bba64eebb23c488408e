I"Ab<h1 id="introduction">Introduction</h1>

<p>Today we are improving our mechanic from <a href="https://divin.github.io/tutorials/godot-tutorial-1/">Tutorial 1</a>. The result will look like this:</p>

<p><img src="/assets/images/posts/tutorial_2/result.gif" alt="Result" title="Result" class="align-center" /></p>

<p>Looks like similar as before, right? Indeed but we got rid of the “A” button to switch between draw and drag mode. Thanks to the guys on the <a href="https://www.reddit.com/r/godot/">Godot subreddit</a>, who gave me feedback on my previous tutorial.</p>

<p>Again a little disclaimer:</p>

<p><em>This tutorial is more aimed for people with a bit of knowledge in Godot and GDScript.
I like to use a bit more Object Oriented Programming (OOP) style and usually try to define the variables and methods correctly by limiting
the data type (for example</em> <code class="language-plaintext highlighter-rouge">var foo : String = "bar"</code> <em>). This is helpful to prevent misuse of variables/methods and make bug fixing a bit easier in my opinion.</em></p>

<p>Download links for the source code are on my GitHub (or visit the <a href="#download">Download section</a>) :)</p>

<h1 id="project-settings">Project Settings</h1>

<p>These are the same as for the <a href="https://divin.github.io/tutorials/godot-tutorial-1/">previous tutorial</a>. Please have a look there!</p>

<h1 id="creating-the-main-scene">Creating the main scene</h1>

<p>We start with something simple this time, the main scene. Just create a <code class="language-plaintext highlighter-rouge">Node2D</code>, name it “Main” and we are done. 
This time we don’t need a script as everything will be handled by the <code class="language-plaintext highlighter-rouge">Paper</code> scene itself. Fancy, right? :)</p>

<h1 id="creating-the-paper-scene">Creating the paper scene</h1>

<p>Now to the hard part, we create a new scene, select as our root node a <code class="language-plaintext highlighter-rouge">TextureRect</code> and name it “Paper”.</p>

<p><img src="/assets/images/posts/tutorial_2/texture_rect.gif" alt="TextureRect" class="align-center" /></p>

<p>After that we set the texture for our <code class="language-plaintext highlighter-rouge">TextureRect</code>. Next we want to create two <code class="language-plaintext highlighter-rouge">Area2D</code> objects.</p>

<h2 id="adding-area2d-objects">Adding <code class="language-plaintext highlighter-rouge">Area2D</code> objects</h2>

<p><code class="language-plaintext highlighter-rouge">Area2D</code> objects are great to detect collision, we use it to have two different areas on our paper we can distinguish. So, let’s start.</p>

<p>We add the first <code class="language-plaintext highlighter-rouge">Area2D</code> and name it “DragArea”. To this area we add a <code class="language-plaintext highlighter-rouge">CollisionShape2D</code> as child this is our collision area. As shape we choose a Rectangle.
You should align the <code class="language-plaintext highlighter-rouge">CollisionShape2D</code> to fit the top part of the paper. It should look like this if you’re done:</p>

<p><img src="/assets/images/posts/tutorial_2/first_area.png" alt="area_1" class="align-center" /></p>

<p>For the second <code class="language-plaintext highlighter-rouge">Area2D</code> we do basically the same thing except we name it “DrawArea” and align the <code class="language-plaintext highlighter-rouge">CollisionShape2D</code> to fit the lower part of the paper. 
When done our paper should look like this:</p>

<p><img src="/assets/images/posts/tutorial_2/second_area.png" alt="area_2" class="align-center" /></p>

<p>For convenience I left a gap between the two areas. You should avoid overlapping areas.</p>

<p><img src="/assets/images/posts/tutorial_2/paper_scene.png" alt="paper" class="align-left" />
Our scene should look like the picture on the left. We are done for the moment, so let’s add a script to our <code class="language-plaintext highlighter-rouge">Paper</code> and also call it “Paper”.</p>

<h2 id="set-variables">Set variables</h2>

<p>As usual we begin with our script by defining some variables we need later. The <code class="language-plaintext highlighter-rouge">class_name</code> will be “Paper”.
In essence we need the following:</p>

<ul>
  <li>a color for our pen, saved in the constant <code class="language-plaintext highlighter-rouge">color_black</code>,</li>
  <li>some boolean data types which we use to track if we are at the moment dragging or drawing  (<code class="language-plaintext highlighter-rouge">dragging</code> and <code class="language-plaintext highlighter-rouge">drawing</code>)</li>
  <li><code class="language-plaintext highlighter-rouge">Vector2</code> to track the drag and previous mouse position (<code class="language-plaintext highlighter-rouge">drag_position</code> and <code class="language-plaintext highlighter-rouge">previous_mouse_position</code>)</li>
  <li>an <code class="language-plaintext highlighter-rouge">Node2D</code> which will be used as our pen</li>
  <li>the name of our areas as strings</li>
  <li>and last but not least some fancy mouse cursors (thanks to <a href="https://kicked-in-teeth.itch.io/grab-hand">Kicked-in-Teeth</a>)</li>
</ul>

<div class="language-gdscript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class_name</span> <span class="n">Paper</span>
<span class="k">extends</span> <span class="n">TextureRect</span>

<span class="c1"># Color</span>
<span class="k">const</span> <span class="n">color_black</span> <span class="p">:</span> <span class="kt">Color</span> <span class="o">=</span> <span class="kt">Color</span><span class="p">(</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span> <span class="p">)</span> <span class="c1"># Black</span>

<span class="c1"># Bools</span>
<span class="k">var</span> <span class="n">dragging</span> <span class="p">:</span> <span class="kt">bool</span> <span class="o">=</span> <span class="bp">false</span> <span class="c1"># dragging mode</span>
<span class="k">var</span> <span class="n">drawing</span> <span class="p">:</span> <span class="kt">bool</span> <span class="o">=</span> <span class="bp">false</span> <span class="c1"># signing mode</span>

<span class="c1"># Vector2</span>
<span class="k">var</span> <span class="n">drag_position</span> <span class="p">:</span> <span class="kt">Vector2</span> <span class="o">=</span> <span class="kt">Vector2</span><span class="o">.</span><span class="n">ZERO</span> <span class="c1"># drag vector</span>
<span class="k">var</span> <span class="n">previous_mouse_position</span> <span class="p">:</span> <span class="kt">Vector2</span> <span class="o">=</span> <span class="kt">Vector2</span><span class="o">.</span><span class="n">ZERO</span> <span class="c1"># previouse mouse position vector</span>

<span class="k">onready</span> <span class="k">var</span> <span class="n">pen</span> <span class="p">:</span> <span class="n">Node2D</span> <span class="o">=</span> <span class="n">Node2D</span><span class="o">.</span><span class="n">new</span><span class="p">()</span> <span class="c1"># Create an Node2D for the pen when ready</span>

<span class="c1"># Name of Areas</span>
<span class="k">var</span> <span class="n">drag_area_name</span> <span class="p">:</span> <span class="kt">String</span> <span class="o">=</span> <span class="s2">"DragArea"</span> <span class="c1"># Name of the Drag Area</span>
<span class="k">var</span> <span class="n">draw_area_name</span> <span class="p">:</span> <span class="kt">String</span> <span class="o">=</span> <span class="s2">"DrawArea"</span> <span class="c1"># Name of the Draw Area</span>

<span class="c1"># Mouse Cursor</span>
<span class="k">var</span> <span class="n">standard_mouse</span> <span class="o">=</span> <span class="nb">preload</span><span class="p">(</span><span class="s2">"res://assets/Sprites/Mouse_Cursor/hand_01.png"</span><span class="p">)</span> <span class="c1"># Standard Coursor</span>

<span class="k">var</span> <span class="n">on_drag_mouse</span> <span class="o">=</span> <span class="nb">preload</span><span class="p">(</span><span class="s2">"res://assets/Sprites/Mouse_Cursor/hand_02.png"</span><span class="p">)</span> <span class="c1"># Cursor when over Drag Area</span>
<span class="k">var</span> <span class="n">drag_mouse</span> <span class="o">=</span> <span class="nb">preload</span><span class="p">(</span><span class="s2">"res://assets/Sprites/Mouse_Cursor/hand_06.png"</span><span class="p">)</span> <span class="c1"># Cursor when dragging</span>

<span class="k">var</span> <span class="n">on_draw_mouse</span> <span class="o">=</span> <span class="nb">preload</span><span class="p">(</span><span class="s2">"res://assets/Sprites/Mouse_Cursor/hand_08.png"</span><span class="p">)</span> <span class="c1"># Cursor when over Draw Area</span>
<span class="k">var</span> <span class="n">draw_mouse</span> <span class="o">=</span> <span class="nb">preload</span><span class="p">(</span><span class="s2">"res://assets/Sprites/Mouse_Cursor/hand_03.png"</span><span class="p">)</span> <span class="c1"># Cursor when drawing</span>
</code></pre></div></div>

<h2 id="ready-and-process">Ready and process</h2>

<p>In the <code class="language-plaintext highlighter-rouge">_ready</code> method we only call our <code class="language-plaintext highlighter-rouge">make_drawing_possible</code> function which is not really different to the one in the previous tutorial. 
The <code class="language-plaintext highlighter-rouge">_process</code> method should update our <code class="language-plaintext highlighter-rouge">pen</code> and also our mouse cursor. We get following:</p>

<div class="language-gdscript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="nf">_ready</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">void</span><span class="p">:</span>
	<span class="bp">self</span><span class="o">.</span><span class="n">make_drawing_possible</span><span class="p">()</span>
	
<span class="k">func</span> <span class="nf">_process</span><span class="p">(</span><span class="n">_delta</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">void</span><span class="p">:</span>
	<span class="bp">self</span><span class="o">.</span><span class="n">pen</span><span class="o">.</span><span class="n">update</span><span class="p">()</span>
	<span class="bp">self</span><span class="o">.</span><span class="n">update_mouse</span><span class="p">()</span>
</code></pre></div></div>

<h2 id="make-drawing-possible">Make drawing possible</h2>

<p>To make drawing possible we use the same method as in our previous tutorial. For more details see <a href="https://divin.github.io/tutorials/godot-tutorial-1/#make-drawing-possible">here</a>.</p>

<div class="language-gdscript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="nf">make_drawing_possible</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">void</span><span class="p">:</span>
	<span class="c1"># Create Viewport to render the drawing</span>
	<span class="k">var</span> <span class="n">viewport</span> <span class="p">:</span> <span class="n">Viewport</span> <span class="o">=</span> <span class="n">Viewport</span><span class="o">.</span><span class="n">new</span><span class="p">()</span>
	<span class="k">var</span> <span class="n">rect</span> <span class="p">:</span> <span class="kt">Rect2</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">get_rect</span><span class="p">()</span>
	<span class="n">viewport</span><span class="o">.</span><span class="n">size</span> <span class="o">=</span> <span class="n">rect</span><span class="o">.</span><span class="n">size</span>
	<span class="n">viewport</span><span class="o">.</span><span class="n">usage</span> <span class="o">=</span> <span class="n">Viewport</span><span class="o">.</span><span class="n">USAGE_2D</span> <span class="c1"># Render Mode</span>
	<span class="c1">#viewport.render_target_clear_mode = Viewport.CLEAR_MODE_ONLY_NEXT_FRAME # Never Clear</span>
	<span class="n">viewport</span><span class="o">.</span><span class="n">render_target_clear_mode</span> <span class="o">=</span> <span class="n">Viewport</span><span class="o">.</span><span class="n">CLEAR_MODE_ONLY_NEXT_FRAME</span> <span class="c1"># Works better!</span>
	<span class="n">viewport</span><span class="o">.</span><span class="n">render_target_v_flip</span> <span class="o">=</span> <span class="bp">true</span> <span class="c1"># OpenGL flips render target we have to flip it again</span>
	<span class="n">viewport</span><span class="o">.</span><span class="n">transparent_bg</span> <span class="o">=</span> <span class="bp">true</span> <span class="c1"># Set Background transparent so we see the drawing</span>
	<span class="n">viewport</span><span class="o">.</span><span class="n">add_child</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">pen</span><span class="p">)</span> <span class="c1"># Add the pen as child to viewport</span>
	<span class="k">var</span> <span class="n">error</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">pen</span><span class="o">.</span><span class="n">connect</span><span class="p">(</span><span class="s2">"draw"</span><span class="p">,</span> <span class="bp">self</span><span class="p">,</span> <span class="s2">"_on_draw"</span><span class="p">)</span> <span class="c1"># Connect _on_draw with the draw method from pen</span>
	<span class="k">if</span> <span class="n">error</span> <span class="o">!=</span> <span class="n">OK</span><span class="p">:</span> <span class="c1"># If we get an error</span>
		<span class="nb">printerr</span><span class="p">(</span><span class="s2">"Couldn't connect Pen. Error Code: "</span><span class="p">,</span> <span class="n">error</span><span class="p">)</span>
	<span class="bp">self</span><span class="o">.</span><span class="n">add_child</span><span class="p">(</span><span class="n">viewport</span><span class="p">)</span> <span class="c1"># Add viewport as child</span>
	
	<span class="c1"># Use a sprite to display the result texture</span>
	<span class="k">var</span> <span class="n">rt</span> <span class="p">:</span> <span class="n">Texture</span> <span class="o">=</span> <span class="n">viewport</span><span class="o">.</span><span class="n">get_texture</span><span class="p">()</span>
	<span class="k">var</span> <span class="n">board</span> <span class="p">:</span> <span class="n">TextureRect</span> <span class="o">=</span> <span class="n">TextureRect</span><span class="o">.</span><span class="n">new</span><span class="p">()</span>
	<span class="n">board</span><span class="o">.</span><span class="n">set_texture</span><span class="p">(</span><span class="n">rt</span><span class="p">)</span>
	<span class="bp">self</span><span class="o">.</span><span class="n">add_child</span><span class="p">(</span><span class="n">board</span><span class="p">)</span>
</code></pre></div></div>

<h2 id="change-mouse-cursor">Change mouse cursor</h2>

<p>To change the mouse cursors we need the method <code class="language-plaintext highlighter-rouge">update_mouse</code>. This method basically just checks if we are hovering over the specific area (<code class="language-plaintext highlighter-rouge">DragArea</code> or <code class="language-plaintext highlighter-rouge">DrawArea</code>) by calling the mysterious method <code class="language-plaintext highlighter-rouge">is_point_in_area</code>, which we will discuss in a bit.</p>

<div class="language-gdscript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Updat Mouse Method</span>
<span class="k">func</span> <span class="nf">update_mouse</span><span class="p">():</span>
	<span class="k">var</span> <span class="n">mouse_pos</span> <span class="p">:</span> <span class="kt">Vector2</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">get_global_mouse_position</span><span class="p">()</span> <span class="c1"># Get mosue position</span>
	<span class="k">var</span> <span class="n">on_drag</span> <span class="p">:</span> <span class="kt">bool</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">is_point_in_area</span><span class="p">(</span><span class="n">mouse_pos</span><span class="p">,</span> <span class="n">drag_area_name</span><span class="p">)</span> <span class="c1"># Check if mouse is in drag area</span>
	<span class="k">var</span> <span class="n">on_draw</span> <span class="p">:</span> <span class="kt">bool</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">is_point_in_area</span><span class="p">(</span><span class="n">mouse_pos</span><span class="p">,</span> <span class="n">draw_area_name</span><span class="p">)</span> <span class="c1"># Check if mouse is in draw area</span>
	<span class="k">if</span> <span class="n">on_drag</span> <span class="ow">and</span> <span class="ow">not</span> <span class="n">Input</span><span class="o">.</span><span class="n">is_mouse_button_pressed</span><span class="p">(</span><span class="n">BUTTON_LEFT</span><span class="p">):</span> <span class="c1"># If we hover over drag area</span>
		<span class="n">Input</span><span class="o">.</span><span class="n">set_custom_mouse_cursor</span><span class="p">(</span><span class="n">on_drag_mouse</span><span class="p">)</span> <span class="c1"># Set mouse cursor</span>
	<span class="k">elif</span> <span class="n">on_draw</span> <span class="ow">and</span> <span class="ow">not</span> <span class="n">Input</span><span class="o">.</span><span class="n">is_mouse_button_pressed</span><span class="p">(</span><span class="n">BUTTON_LEFT</span><span class="p">):</span> <span class="c1"># If we hover over draw area</span>
		<span class="n">Input</span><span class="o">.</span><span class="n">set_custom_mouse_cursor</span><span class="p">(</span><span class="n">on_draw_mouse</span><span class="p">)</span> <span class="c1"># Set mouse cursor</span>
	<span class="k">elif</span> <span class="ow">not</span> <span class="n">on_drag</span> <span class="ow">and</span> <span class="ow">not</span> <span class="n">on_draw</span><span class="p">:</span> <span class="c1"># If not over these areas</span>
		<span class="n">Input</span><span class="o">.</span><span class="n">set_custom_mouse_cursor</span><span class="p">(</span><span class="n">standard_mouse</span><span class="p">)</span>
</code></pre></div></div>

<h2 id="are-we-in-the-area">Are we in the area?</h2>

<p>One of the important methods in this script is <code class="language-plaintext highlighter-rouge">is_point_in_area</code>. The issue I encounter is that if you are using <code class="language-plaintext highlighter-rouge">TextureRect</code> and a <code class="language-plaintext highlighter-rouge">Signal</code> from it, like <code class="language-plaintext highlighter-rouge">gui_input</code> (which we will use in the next section) this will block all <code class="language-plaintext highlighter-rouge">InputEvent</code>s. This means, we can’t just use the <code class="language-plaintext highlighter-rouge">Signal</code> <code class="language-plaintext highlighter-rouge">mouse_entered</code> from the <code class="language-plaintext highlighter-rouge">Area2D</code> object to detect if we are inside the area. Because this will just get blocked. The mouse filter option on the <code class="language-plaintext highlighter-rouge">TextureRect</code> is unfortunately not helpful as we also want to drag the paper.</p>

<p>To solve this issue I ended up checking if a point is inside an area by using the <code class="language-plaintext highlighter-rouge">intersect_point</code> method. See the <a href="https://docs.godotengine.org/en/stable/classes/class_physics2ddirectspacestate.html#method-descriptions">Docs</a> for some more information about this. The important bit was to set <code class="language-plaintext highlighter-rouge">collide_with_areas = true</code>.
The method will return an <code class="language-plaintext highlighter-rouge">Array</code> with all colliders we are intersecting. We just loop through these and check if one of the names in equal to the area we are looking for.</p>

<div class="language-gdscript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Function which checks if a point (Vector2) is inside an Area2D</span>
<span class="k">func</span> <span class="nf">is_point_in_area</span><span class="p">(</span><span class="n">point</span> <span class="p">:</span> <span class="kt">Vector2</span><span class="p">,</span> <span class="n">area_name</span> <span class="p">:</span> <span class="kt">String</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">bool</span><span class="p">:</span>
	<span class="k">var</span> <span class="n">output</span> <span class="p">:</span> <span class="kt">bool</span> <span class="o">=</span> <span class="bp">false</span> <span class="c1"># Our output, default false</span>
	<span class="k">var</span> <span class="n">space_state</span> <span class="p">:</span> <span class="n">Physics2DDirectSpaceState</span> <span class="o">=</span> <span class="n">get_world_2d</span><span class="p">()</span><span class="o">.</span><span class="n">direct_space_state</span> <span class="c1"># Get space state of all items</span>
	<span class="k">var</span> <span class="n">result</span> <span class="p">:</span> <span class="kt">Array</span> <span class="o">=</span> <span class="n">space_state</span><span class="o">.</span><span class="n">intersect_point</span><span class="p">(</span><span class="n">point</span><span class="p">,</span> <span class="mi">32</span><span class="p">,</span> <span class="p">[],</span> <span class="mi">2147483647</span><span class="p">,</span> <span class="bp">true</span><span class="p">,</span> <span class="bp">true</span><span class="p">)</span> <span class="c1"># Check if points intersect with something</span>
	<span class="k">if</span> <span class="n">result</span> <span class="o">!=</span> <span class="p">[]:</span> <span class="c1"># If we insect with something</span>
		<span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">result</span><span class="p">:</span> <span class="c1"># Go through items in the array</span>
			<span class="k">if</span> <span class="n">item</span><span class="p">[</span><span class="s2">"collider"</span><span class="p">]</span><span class="o">.</span><span class="n">name</span> <span class="o">==</span> <span class="n">area_name</span><span class="p">:</span> <span class="c1"># Check if collider name equals the name we are looking for</span>
				<span class="n">output</span> <span class="o">=</span> <span class="bp">true</span> <span class="c1"># set our output to true</span>
	<span class="k">return</span> <span class="n">output</span>
</code></pre></div></div>

<h1 id="make-dragging-possible">Make dragging possible</h1>

<p>To make dragging possible we use the same method as in our previous tutorial. For more details see <a href="https://divin.github.io/tutorials/godot-tutorial-1/#dragging">here</a>.
I have rewritten the code a bit to make it clearer but the idea is the same. The only big difference is that we are just getting the position of the mouse once clicked and give this point to two methods <code class="language-plaintext highlighter-rouge">drag_paper</code> and <code class="language-plaintext highlighter-rouge">draw_paper</code>.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>func _on_Paper_gui_input(event):
	# Check if we pressed a mouse button
	if event is InputEventMouseButton:
		# Check if we pressed left mouse button
		if event.button_index == BUTTON_LEFT and event.pressed:
			var point : Vector2 = self.get_global_mouse_position() # Get global mouse position
			# Call methods
			self.drag_paper(point)
			self.draw_paper(point)
		else:
			# Else set dragging and drawing false
			self.dragging = false
			self.drawing = false
	# Check if we moved the mouse while we drag the paper
	if event is InputEventMouseMotion and drag_position != Vector2.ZERO and self.dragging:
		# Set new position
		self.rect_global_position = self.get_global_mouse_position() - self.drag_position
</code></pre></div></div>

<h1 id="drag--draw">Drag &amp; Draw</h1>

<h1 id="download-">Download <a name="download"></a></h1>

<p>You can find the the source code for this tutorial and all previouse and upcoming tutorials <a href="https://github.com/divin/Godot-Tutorials">here</a>.</p>
:ET