I"90<h1 id="introduction">Introduction</h1>

<p>In this tutorial I’ll show you how to make a drawable and draggable paper in Godot. The result will look like this:</p>

<p><img src="/assets/images/posts/tutorial_1/result.gif" alt="Result" title="Result" /></p>

<p>This tutorial is more aimed for people with a bit of knowledge in Godot and GDScript.</p>

<h1 id="project-settings">Project settings</h1>

<p>The only changes I did to the project settings were made under <code class="language-plaintext highlighter-rouge">Display/Window</code>:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Width = 320
Height = 180
...
Test Width = 1280
Test Height = 720
...
Mode = 2d
Aspect = expand
</code></pre></div></div>

<h1 id="creating-the-paper-scene">Creating the paper scene</h1>

<p>We will start with the interesting part, the paper itself. We make an new scene, use a <code class="language-plaintext highlighter-rouge">TextureRect</code> as our root node and name it “Paper”. I didn’t changed any settings in the inspector.
Depending on your aim you want to add now a texture to the <code class="language-plaintext highlighter-rouge">TextureRect</code> or later in the <code class="language-plaintext highlighter-rouge">Main</code> scene.</p>

<h2 id="set-variables">Set variables</h2>

<p>Next, we attach a script to it. I usually like to give the script a <code class="language-plaintext highlighter-rouge">class_name</code>, the name of the script itself (in our case <code class="language-plaintext highlighter-rouge">Paper</code>). Let’s define some variables:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>class_name Paper
extends TextureRect

# Bool to check if pen is selected
var pen_selected : bool

# Drawing color of the pen
const color : Color = Color( 0, 0, 0, 1 ) # Black

# Saves the Position if the Paper is being dragged
var drag_position : Vector2 = Vector2.ZERO

# Save the previouse Mouse position
var previous_mouse_position : Vector2 = Vector2.ZERO

# Create an Node2D for the pen when ready
onready var pen : Node2D = Node2D.new()
</code></pre></div></div>

<p>Most of them are self explanatory (or explained by the comments), the <code class="language-plaintext highlighter-rouge">pen</code> variable, which is an <code class="language-plaintext highlighter-rouge">Node2D</code>, is used to create our “pen”. We will call the <code class="language-plaintext highlighter-rouge">draw</code> method from this Node to do the drawing.</p>

<h2 id="setter-function">Setter function</h2>

<p>We also need a function to set our variable <code class="language-plaintext highlighter-rouge">pen_selected</code> from outside the script:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># Setter function for pen_selected
func set_pen_selected(is_selected : bool) -&gt; void:
  self.pen_selected = is_selected
</code></pre></div></div>

<h2 id="make-drawing-possible">Make drawing possible</h2>

<p>Now is time to make the drawing possible</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>func make_drawing_possible() -&gt; void:

  # Create Viewport to render the drawing
  var viewport = Viewport.new()
  var rect = self.get_rect() # Get the size of the TextureRect
  viewport.size = rect.size # Set size of viewport to the size of TextureRect
  viewport.usage = Viewport.USAGE_2D # Render Mode
  viewport.render_target_clear_mode = Viewport.CLEAR_MODE_ONLY_NEXT_FRAME # Works better than CLEAR_MODE_NEVER
  viewport.render_target_v_flip = true # OpenGL flips render target so we have to flip it again
  viewport.transparent_bg = true # Set Background transparent so we see the drawing
  viewport.add_child(self.pen) # Add the pen as child to viewport

  self.pen.connect("draw", self, "_on_draw") # Connect _on_draw with the draw method from pen
  self.add_child(viewport) # Add viewport as child
  
  # Use a sprite to display the result texture
  var rt = viewport.get_texture() # Which is transparent
  var board = TextureRect.new() # Make a canvas (also TextureRect)
  board.set_texture(rt) # Set texture
  self.add_child(board) # Add canvas
</code></pre></div></div>

<p>I’ve commented the code as good as possible to get an understanding what is happening. Credit goes to a user called “Zylann” from this <a href="https://godotengine.org/qa/24621/painting-game-persist-drawing">post</a>. I had to change some bits to suit my needs.</p>

<p>Basically we create an new <code class="language-plaintext highlighter-rouge">Viewport</code> to render the drawing (with the same size as our <code class="language-plaintext highlighter-rouge">Paper</code>) and add our <code class="language-plaintext highlighter-rouge">pen</code> as child. We connect the <code class="language-plaintext highlighter-rouge">_on_draw</code> method (which we will define in a bit) to the <code class="language-plaintext highlighter-rouge">draw</code> method of the <code class="language-plaintext highlighter-rouge">pen</code>. After that we add the <code class="language-plaintext highlighter-rouge">Viewport</code> as child to the <code class="language-plaintext highlighter-rouge">Paper</code>, create another <code class="language-plaintext highlighter-rouge">TextureRect</code> which suits us as canvas.</p>

<h2 id="get-ready-and-process">Get ready and process</h2>

<p>The next step is simple, we call our monstrosity of function <code class="language-plaintext highlighter-rouge">make_drawing_possible</code> in <code class="language-plaintext highlighter-rouge">_ready</code> and update the <code class="language-plaintext highlighter-rouge">pen</code> in <code class="language-plaintext highlighter-rouge">_process</code>.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>func _ready() -&gt; void:
  self.make_signature_possible()

func _process(_delta) -&gt; void:
  self.pen.update()
</code></pre></div></div>

<h2 id="draw">Draw</h2>

<p>Now it’s time to define <code class="language-plaintext highlighter-rouge">_on_draw</code>:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>func _on_draw() -&gt; void:
  if self.pen_selected:
    var mouse_pos = self.get_local_mouse_position() # Get local mouse position

    if Input.is_mouse_button_pressed(BUTTON_LEFT):
      self.pen.draw_line(mouse_pos, self.previous_mouse_position, self.color) # Finally draw something
    self.previous_mouse_position = mouse_pos # Update previous mouse position
</code></pre></div></div>

<p>If <code class="language-plaintext highlighter-rouge">pen_selected = true</code> we get the mouse position and if we also press the left mouse button we start drawing. Before we return we update the <code class="language-plaintext highlighter-rouge">previous_mouse_position</code>.</p>

<h2 id="dragging">Dragging</h2>

<p>Now to make the paper also draggable we select <code class="language-plaintext highlighter-rouge">Paper</code> (the <code class="language-plaintext highlighter-rouge">TextureRect</code>) in the scene view and click at the <code class="language-plaintext highlighter-rouge">Node</code> tab (usually next to the <code class="language-plaintext highlighter-rouge">Inspector</code> tab). Here we want to connect the <code class="language-plaintext highlighter-rouge">gui_input(event : InputEvent)</code> with our script. A function should be automatically generated in the <code class="language-plaintext highlighter-rouge">Paper.gd</code> once connected.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>func _on_Paper_gui_input(event : InputEvent) -&gt; void:

  if not self.pen_selected:
    if event is InputEventMouseButton:
      if event.pressed:
        self.drag_position = self.get_global_mouse_position() - self.rect_global_position
      else:
        self.drag_position = Vector2.ZERO
    if event is InputEventMouseMotion and drag_position != Vector2.ZERO:
      self.rect_global_position = self.get_global_mouse_position() - self.drag_position
</code></pre></div></div>

<p>If we didn’t select the pen and the <code class="language-plaintext highlighter-rouge">InputEvent</code> recognized an <code class="language-plaintext highlighter-rouge">event</code> of type <code class="language-plaintext highlighter-rouge">InputEventMouseButton</code> (we clicked a mouse button) and is <code class="language-plaintext highlighter-rouge">pressed</code> we want to update the <code class="language-plaintext highlighter-rouge">drag_position</code>. Otherwise we want to set the <code class="language-plaintext highlighter-rouge">drag_position</code> to a zero vector. If there is an <code class="language-plaintext highlighter-rouge">event</code> type <code class="language-plaintext highlighter-rouge">InputEventMouseMotion</code> (we moved the mouse) and the <code class="language-plaintext highlighter-rouge">drag_position</code> is not a zero vector we want to update the position of the <code class="language-plaintext highlighter-rouge">TextureRect</code>.</p>

<h1 id="creating-the-main-scene">Creating the main scene</h1>

<p>Now we getting closer to the finish. We make now our <code class="language-plaintext highlighter-rouge">Main</code> scene. Simply by creating an new scene, choose a basic <code class="language-plaintext highlighter-rouge">Node2D</code> as root node and name it “Main”. Before we start programming again we drag and drop the <code class="language-plaintext highlighter-rouge">Paper</code> inside.</p>

<h2 id="set-variables-1">Set variables</h2>

<p>Similar to <code class="language-plaintext highlighter-rouge">Paper</code> scene we create some variables. A variable <code class="language-plaintext highlighter-rouge">paper</code> which refers to the just added <code class="language-plaintext highlighter-rouge">Paper</code> scene and <code class="language-plaintext highlighter-rouge">pen_selected</code> which is the same as we used in <code class="language-plaintext highlighter-rouge">Paper.gd</code>.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>class_name Main
extends Node2D

# Grab the Paper when ready
onready var paper : Paper = $Paper

# Bool to store if pen is selected
var pen_selected : bool = false
</code></pre></div></div>

<h2 id="get-input">Get input</h2>

<p>We now want to be able to switch between dragging and drawing. This is done by a simple key press (in this case “A”).</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>func _input(event) -&gt; void:

  # Bool to check if the button is just pressed (not needed if you assigned an action key)
  var just_pressed : bool = event.is_pressed() and not event.is_echo()

  # Check if the "A" button was just pressed
  if Input.is_key_pressed(KEY_A) and just_pressed:
    self.select_pen()
</code></pre></div></div>

<p>If the “A” key is just pressed, we want to call a method <code class="language-plaintext highlighter-rouge">select_pen</code> which communicates between the <code class="language-plaintext highlighter-rouge">Main.gd</code> and <code class="language-plaintext highlighter-rouge">Paper.gd</code>.</p>

<h2 id="select-the-pen">Select the pen</h2>

<p>The last step is to set <code class="language-plaintext highlighter-rouge">pen_selected</code> in <code class="language-plaintext highlighter-rouge">Paper.gd</code>:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>func select_pen() -&gt; void:
  # Function which selectes the pen

  # Negate pen_selected
  self.pen_selected = not self.pen_selected

  # Set pen_selected from the paper
  paper.set_pen_selected(self.pen_selected)
</code></pre></div></div>

<p>Now you should be able to draw on the paper :)</p>

<h1 id="conclusion">Conclusion</h1>

<p>If you followed this tutorial correctly you should able to drag a paper and also draw on it. Based on this you can expand this mechanic for all kinds of application. I hope you enjoyed it!</p>
:ET